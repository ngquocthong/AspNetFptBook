// <auto-generated />
using System;
using BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230228051744_Bussiness")]
    partial class Bussiness
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObjects.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ad_pass")
                        .HasColumnType("int");

                    b.Property<string>("ad_username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("BusinessObjects.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("book_author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("book_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("book_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("book_price")
                        .HasColumnType("float");

                    b.Property<int>("cate_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("cate_id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            book_author = "F. Scott Fitzgerald",
                            book_img = "png",
                            book_name = "The Great Gatsby",
                            book_price = 10.99,
                            cate_id = 1,
                            quantity = 50
                        },
                        new
                        {
                            ID = 2,
                            book_author = "Harper Lee",
                            book_img = "png",
                            book_name = "To Kill a Mockingbird",
                            book_price = 8.9900000000000002,
                            cate_id = 1,
                            quantity = 30
                        },
                        new
                        {
                            ID = 3,
                            book_author = "Paulo Coelho",
                            book_img = "png",
                            book_name = "The Alchemist",
                            book_price = 12.99,
                            cate_id = 1,
                            quantity = 20
                        },
                        new
                        {
                            ID = 4,
                            book_author = "Robert Kiyosaki",
                            book_img = "png",
                            book_name = "Rich Dad Poor Dad",
                            book_price = 15.99,
                            cate_id = 2,
                            quantity = 40
                        },
                        new
                        {
                            ID = 5,
                            book_author = "Benjamin Graham",
                            book_img = "png",
                            book_name = "The Intelligent Investor",
                            book_price = 20.989999999999998,
                            cate_id = 2,
                            quantity = 10
                        });
                });

            modelBuilder.Entity("BusinessObjects.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("cart_quantity")
                        .HasColumnType("int");

                    b.Property<double>("cart_totalPrice")
                        .HasColumnType("float");

                    b.Property<int>("cus_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("cus_id")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("BusinessObjects.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("accept")
                        .HasColumnType("bit");

                    b.Property<string>("cate_des")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cate_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            accept = true,
                            cate_des = "Related to unrealistic storey",
                            cate_name = "Fiction"
                        },
                        new
                        {
                            ID = 2,
                            accept = false,
                            cate_des = "Related to financial",
                            cate_name = "Finance"
                        });
                });

            modelBuilder.Entity("BusinessObjects.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("cus_address")
                        .HasColumnType("int");

                    b.Property<int>("cus_name")
                        .HasColumnType("int");

                    b.Property<int>("cus_pass")
                        .HasColumnType("int");

                    b.Property<int>("cus_username")
                        .HasColumnType("int");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BusinessObjects.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("cus_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<double>("totalPrice")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            createdDate = new DateTime(2023, 2, 28, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7506),
                            cus_id = "ahha",
                            shippingAddress = "123 Main St, Anytown USA",
                            status = true,
                            totalPrice = 100.0
                        },
                        new
                        {
                            ID = 2,
                            createdDate = new DateTime(2023, 2, 27, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7516),
                            cus_id = "ahha",
                            shippingAddress = "456 Elm St, Anytown USA",
                            status = false,
                            totalPrice = 200.0
                        },
                        new
                        {
                            ID = 3,
                            createdDate = new DateTime(2023, 2, 26, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7519),
                            cus_id = "ahha",
                            shippingAddress = "789 Maple St, Anytown USA",
                            status = true,
                            totalPrice = 50.0
                        },
                        new
                        {
                            ID = 4,
                            createdDate = new DateTime(2023, 2, 25, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7520),
                            cus_id = "ahha",
                            shippingAddress = "101 Oak St, Anytown USA",
                            status = false,
                            totalPrice = 75.0
                        },
                        new
                        {
                            ID = 5,
                            createdDate = new DateTime(2023, 2, 24, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7521),
                            cus_id = "ahha",
                            shippingAddress = "111 Pine St, Anytown USA",
                            status = true,
                            totalPrice = 125.0
                        },
                        new
                        {
                            ID = 6,
                            createdDate = new DateTime(2023, 2, 23, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7522),
                            cus_id = "ahha",
                            shippingAddress = "222 Cedar St, Anytown USA",
                            status = false,
                            totalPrice = 150.0
                        },
                        new
                        {
                            ID = 7,
                            createdDate = new DateTime(2023, 2, 22, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7523),
                            cus_id = "ahha",
                            shippingAddress = "333 Elm St, Anytown USA",
                            status = true,
                            totalPrice = 200.0
                        },
                        new
                        {
                            ID = 8,
                            createdDate = new DateTime(2023, 2, 21, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7523),
                            cus_id = "ahha",
                            shippingAddress = "444 Birch St, Anytown USA",
                            status = false,
                            totalPrice = 175.0
                        },
                        new
                        {
                            ID = 9,
                            createdDate = new DateTime(2023, 2, 20, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7524),
                            cus_id = "ahha",
                            shippingAddress = "555 Maple St, Anytown USA",
                            status = true,
                            totalPrice = 225.0
                        },
                        new
                        {
                            ID = 10,
                            createdDate = new DateTime(2023, 2, 19, 12, 17, 44, 273, DateTimeKind.Local).AddTicks(7525),
                            cus_id = "ahha",
                            shippingAddress = "666 Oak St, Anytown USA",
                            status = false,
                            totalPrice = 250.0
                        });
                });

            modelBuilder.Entity("BusinessObjects.OrderDetails", b =>
                {
                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("order_id", "book_id");

                    b.HasIndex("book_id");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            order_id = 1,
                            book_id = 1,
                            quantity = 2
                        },
                        new
                        {
                            order_id = 1,
                            book_id = 2,
                            quantity = 1
                        });
                });

            modelBuilder.Entity("BusinessObjects.StoreOwner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("own_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("own_pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("own_username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("store_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("StoreOwners");
                });

            modelBuilder.Entity("BusinessObjects.Book", b =>
                {
                    b.HasOne("BusinessObjects.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("cate_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BusinessObjects.Cart", b =>
                {
                    b.HasOne("BusinessObjects.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("BusinessObjects.Cart", "cus_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObjects.Order", b =>
                {
                    b.HasOne("BusinessObjects.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID");
                });

            modelBuilder.Entity("BusinessObjects.OrderDetails", b =>
                {
                    b.HasOne("BusinessObjects.Book", "Book")
                        .WithMany()
                        .HasForeignKey("book_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BusinessObjects.Customer", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
